% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 14-Feb-2023 08:47:35
%
% This script assumes these variables are defined:
%
%   P - input data.
%   T - target data.

clear all; close all; clc;

[train_images, train_labels] = ...
    readMNISTdata('train-images.idx3-ubyte','train-labels.idx1-ubyte');
[test_images, test_labels] = ...
    readMNISTdata('t10k-images.idx3-ubyte','t10k-labels.idx1-ubyte');
    
P = zeros(length(train_images), size(train_images{1},1)*size(train_images{1},1));
T = zeros(length(train_labels), 10);

Ptest = zeros(length(test_images), size(test_images{1},1)*size(test_images{1},1));
Ttest = zeros(length(test_labels), 10);

for i=1:length(train_images)
    data = train_images{i};
    data = data(:);
    P(i,:) = data;
    T(i, train_labels(i)+1) = 1;
end

x = P';
t = T';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = 64;
net = patternnet(hiddenLayerSize, trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 85/100;
net.divideParam.valRatio = 10/100;
net.divideParam.testRatio = 5/100;

net.trainParam.epochs = 10000;
net.trainParam.fail = 0;
net.trainParam.max_fail = 300;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% View the Network
view(net)
% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotconfusion(t,y)
%figure, plotroc(t,y)

cnt_all = 0;
cnt_good = 0;

for i=1:length(test_images)
    data = test_images{i};
    data = data(:);
    data = double(data);
    result = net(data);
    [m, idx] = max(result);
    if idx == test_labels(i)+1
        cnt_good = cnt_good+1;
    end
    cnt_all = cnt_all + 1;
end

disp(cnt_good/cnt_all*100);
